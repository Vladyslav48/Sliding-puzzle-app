{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, auth } from '../firebase';\n\nconst useStorage = file => {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null); //uoploads the image to the Firebase Storage \n\n  useEffect(() => {\n    const currentUserId = auth.currentUser.uid;\n    const storageRef = projectStorage.ref(file.name);\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = new Date().getTime();\n      const currentUserData = (await projectFirestore.collection('users').doc(currentUserId).get()).data();\n      const images = currentUserData.images;\n      console.log(currentUserData);\n      await projectFirestore.collection('users').doc(currentUserId).set({\n        images: [...images, {\n          url,\n          createdAt\n        }]\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\n_s(useStorage, \"xn2AiAzche7NzWswJ7VS1PhvjkU=\");\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/sliding-puzzle-app-main/sliding-puzzle-app/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","auth","useStorage","file","progress","setProgress","error","setError","url","setUrl","currentUserId","currentUser","uid","storageRef","ref","name","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","Date","getTime","currentUserData","collection","doc","get","data","images","console","log","set"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,IAA3C,QAAuD,aAAvD;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B,CAH2B,CAK3B;;AACCC,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMY,aAAa,GAAGT,IAAI,CAACU,WAAL,CAAiBC,GAAvC;AACA,UAAMC,UAAU,GAAGd,cAAc,CAACe,GAAf,CAAmBX,IAAI,CAACY,IAAxB,CAAnB;AAEAF,IAAAA,UAAU,CAACG,GAAX,CAAeb,IAAf,EAAqBc,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AACjD,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAhB,MAAAA,WAAW,CAACc,UAAD,CAAX;AACD,KAHD,EAGIG,GAAD,IAAS;AACVf,MAAAA,QAAQ,CAACe,GAAD,CAAR;AACD,KALD,EAKG,YAAY;AACb,YAAMd,GAAG,GAAG,MAAMK,UAAU,CAACU,cAAX,EAAlB;AACA,YAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,YAAMC,eAAe,GAAG,CAAC,MAAM3B,gBAAgB,CAAC4B,UAAjB,CAA4B,OAA5B,EAAqCC,GAArC,CAAyCnB,aAAzC,EAAwDoB,GAAxD,EAAP,EAAsEC,IAAtE,EAAxB;AACA,YAAMC,MAAM,GAAGL,eAAe,CAACK,MAA/B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,eAAZ;AACA,YAAM3B,gBAAgB,CAAC4B,UAAjB,CAA4B,OAA5B,EAAqCC,GAArC,CAAyCnB,aAAzC,EAAwDyB,GAAxD,CAA4D;AAChEH,QAAAA,MAAM,EAAE,CAAC,GAAGA,MAAJ,EAAa;AAACxB,UAAAA,GAAD;AAAKgB,UAAAA;AAAL,SAAb;AADwD,OAA5D,CAAN;AAIAf,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAhBD;AAiBD,GArBS,EAqBP,CAACL,IAAD,CArBO,CAAT;AAuBD,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CA9BD;;GAAMJ,U;;AAgCN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, auth } from '../firebase';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  //uoploads the image to the Firebase Storage \n   useEffect(() => {\n    const currentUserId = auth.currentUser.uid\n    const storageRef = projectStorage.ref(file.name);\n   \n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    }, (err) => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = new Date().getTime();\n      const currentUserData = (await projectFirestore.collection('users').doc(currentUserId).get()).data();\n      const images = currentUserData.images\n      console.log(currentUserData)\n      await projectFirestore.collection('users').doc(currentUserId).set({\n        images: [...images,  {url,createdAt } ]\n      \n    })\n      setUrl(url);\n    });\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;\n"]},"metadata":{},"sourceType":"module"}