{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vlad\\\\Desktop\\\\sliding-puzzle-app-main\\\\sliding-puzzle-app\\\\src\\\\components\\\\game-components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Tile from \"./ImgPiece\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./game-values\";\nimport { canSwap, shuffle, swap, isSolved } from \"./logic-functions\";\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  imgUrl\n}) => {\n  _s();\n\n  imgUrl = window.location.search.replace('game?img=', '');\n  let [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = tileIndex => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1));\n      setTiles(swappedTiles);\n    }\n  };\n\n  const handleTileClick = index => {\n    swapTiles(index);\n  };\n\n  const handleShuffleClick = () => {\n    shuffleTiles();\n  };\n\n  const handleStartClick = () => {\n    shuffleTiles();\n    setIsStarted(true);\n  };\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE\n  };\n  const hasWon = isSolved(tiles);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        delay: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: style,\n        className: \"board\",\n        children: tiles.map((tile, index) => /*#__PURE__*/_jsxDEV(Tile, {\n          index: index,\n          imgUrl: imgUrl,\n          tile: tile,\n          width: pieceWidth,\n          height: pieceHeight,\n          handleTileClick: handleTileClick\n        }, tile, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), hasWon && isStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Congratulations, you solved the puzzle \\uD83C\\uDF89\\uD83C\\uDF89\\uD83C\\uDF89\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 31\n    }, this), !isStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-btn\",\n      onClick: () => handleStartClick(),\n      children: \"Start game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-btn\",\n      onClick: () => handleShuffleClick(),\n      children: \"Restart game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Board, \"5+dhD0Wb6Y93+3dxRKkjziPlfbk=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/sliding-puzzle-app-main/sliding-puzzle-app/src/components/game-components/Board.js"],"names":["React","useState","Tile","TILE_COUNT","GRID_SIZE","BOARD_SIZE","canSwap","shuffle","swap","isSolved","motion","Board","imgUrl","window","location","search","replace","tiles","setTiles","Array","keys","isStarted","setIsStarted","shuffleTiles","shuffledTiles","swapTiles","tileIndex","indexOf","length","swappedTiles","handleTileClick","index","handleShuffleClick","handleStartClick","pieceWidth","Math","round","pieceHeight","style","width","height","hasWon","opacity","delay","map","tile"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Tile from \"./ImgPiece\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./game-values\"\nimport { canSwap, shuffle, swap, isSolved } from \"./logic-functions\"\nimport { motion } from 'framer-motion';\n\n\nconst Board = ({ imgUrl })=> {\n  imgUrl = window.location.search.replace('game?img=', '');\n  let [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles)\n    setTiles(shuffledTiles);\n  }\n\n  const swapTiles = (tileIndex) => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1))\n      setTiles(swappedTiles)\n    }\n  }\n\n  const handleTileClick = (index) => {\n    swapTiles(index)\n  }\n\n  const handleShuffleClick = () => {\n    shuffleTiles()\n  }\n\n  const handleStartClick = () => {\n    shuffleTiles()\n    setIsStarted(true)\n  }\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE,\n  };\n\n  const hasWon = isSolved(tiles)\n\n  return (\n    \n    <>\n      <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.5 }}>\n\n        <ul style={style} className=\"board\">\n        {tiles.map((tile, index) => (\n          <Tile\n            key={tile}\n            index={index}\n            imgUrl={imgUrl}\n            tile={tile}\n            width={pieceWidth}\n            height={pieceHeight}\n            handleTileClick={handleTileClick}\n          />\n        ))}\n      </ul>\n      </motion.div>\n     \n      {hasWon && isStarted && <div>Congratulations, you solved the puzzle ðŸŽ‰ðŸŽ‰ðŸŽ‰</div>}\n      {!isStarted ?\n        (<button className=\"game-btn\" onClick={() => handleStartClick() }>Start game</button>) \n        :\n        (<button className=\"game-btn\" onClick={() => handleShuffleClick()}>Restart game</button>)}\n    </>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}