{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Vlad/Desktop/sliding-puzzle-app-main/sliding-puzzle-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Vlad/Desktop/sliding-puzzle-app-main/sliding-puzzle-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import Tile from\"./ImgPiece\";import{TILE_COUNT,GRID_SIZE,BOARD_SIZE}from\"./game-values\";import{canSwap,shuffle,swap,isSolved}from\"./logic-functions\";import{motion}from'framer-motion';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Board=function Board(_ref){var imgUrl=_ref.imgUrl;imgUrl=window.location.search.replace('?img=','');var _useState=useState(_toConsumableArray(Array(TILE_COUNT).keys())),_useState2=_slicedToArray(_useState,2),tiles=_useState2[0],setTiles=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isStarted=_useState4[0],setIsStarted=_useState4[1];var shuffleTiles=function shuffleTiles(){var shuffledTiles=shuffle(tiles);setTiles(shuffledTiles);};var swapTiles=function swapTiles(tileIndex){if(canSwap(tileIndex,tiles.indexOf(tiles.length-1))){var swappedTiles=swap(tiles,tileIndex,tiles.indexOf(tiles.length-1));setTiles(swappedTiles);}};var handleTileClick=function handleTileClick(index){swapTiles(index);};var handleShuffleClick=function handleShuffleClick(){shuffleTiles();};var handleStartClick=function handleStartClick(){shuffleTiles();setIsStarted(true);};var pieceWidth=Math.round(BOARD_SIZE/GRID_SIZE);var pieceHeight=Math.round(BOARD_SIZE/GRID_SIZE);var style={width:BOARD_SIZE,height:BOARD_SIZE};var hasWon=isSolved(tiles);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0},animate:{opacity:1},transition:{delay:0.5},children:/*#__PURE__*/_jsx(\"ul\",{style:style,className:\"board\",children:tiles.map(function(tile,index){return/*#__PURE__*/_jsx(Tile,{index:index,imgUrl:imgUrl,tile:tile,width:pieceWidth,height:pieceHeight,handleTileClick:handleTileClick},tile);})})}),hasWon&&isStarted&&/*#__PURE__*/_jsx(\"div\",{children:\"Congratulations, you solved the puzzle \\uD83C\\uDF89\\uD83C\\uDF89\\uD83C\\uDF89\"}),!isStarted?/*#__PURE__*/_jsx(\"button\",{className:\"game-btn\",onClick:function onClick(){return handleStartClick();},children:\"Start game\"}):/*#__PURE__*/_jsx(\"button\",{className:\"game-btn\",onClick:function onClick(){return handleShuffleClick();},children:\"Restart game\"})]});};export default Board;","map":{"version":3,"sources":["C:/Users/Vlad/Desktop/sliding-puzzle-app-main/sliding-puzzle-app/src/components/game-components/Board.js"],"names":["React","useState","Tile","TILE_COUNT","GRID_SIZE","BOARD_SIZE","canSwap","shuffle","swap","isSolved","motion","Board","imgUrl","window","location","search","replace","Array","keys","tiles","setTiles","isStarted","setIsStarted","shuffleTiles","shuffledTiles","swapTiles","tileIndex","indexOf","length","swappedTiles","handleTileClick","index","handleShuffleClick","handleStartClick","pieceWidth","Math","round","pieceHeight","style","width","height","hasWon","opacity","delay","map","tile"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Tile from \"./ImgPiece\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./game-values\"\nimport { canSwap, shuffle, swap, isSolved } from \"./logic-functions\"\nimport { motion } from 'framer-motion';\n\n\nconst Board = ({ imgUrl })=> {\n  imgUrl = window.location.search.replace('?img=', '');\n  let [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles)\n    setTiles(shuffledTiles);\n  }\n\n  const swapTiles = (tileIndex) => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1))\n      setTiles(swappedTiles)\n    }\n  }\n\n  const handleTileClick = (index) => {\n    swapTiles(index)\n  }\n\n  const handleShuffleClick = () => {\n    shuffleTiles()\n  }\n\n  const handleStartClick = () => {\n    shuffleTiles()\n    setIsStarted(true)\n  }\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE,\n  };\n\n  const hasWon = isSolved(tiles)\n\n  return (\n    \n    <>\n      <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.5 }}>\n\n        <ul style={style} className=\"board\">\n        {tiles.map((tile, index) => (\n          <Tile\n            key={tile}\n            index={index}\n            imgUrl={imgUrl}\n            tile={tile}\n            width={pieceWidth}\n            height={pieceHeight}\n            handleTileClick={handleTileClick}\n          />\n        ))}\n      </ul>\n      </motion.div>\n     \n      {hasWon && isStarted && <div>Congratulations, you solved the puzzle ðŸŽ‰ðŸŽ‰ðŸŽ‰</div>}\n      {!isStarted ?\n        (<button className=\"game-btn\" onClick={() => handleStartClick() }>Start game</button>) \n        :\n        (<button className=\"game-btn\" onClick={() => handleShuffleClick()}>Restart game</button>)}\n    </>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}